name: ${COMPOSE_PROJECT_NAME:-darf}
services:
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_started
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    volumes:
      - ./minio/init.sh:/init.sh:ro
    entrypoint: ["/bin/sh","/init.sh"]
    restart: "no"

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/00_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  neo4j:
    image: neo4j:5.20
    environment:
      NEO4J_AUTH: "neo4j/${NEO4J_PASSWORD}"
      NEO4J_server_memory_pagecache_size: 256M
      NEO4J_server_memory_heap_initial__size: 512M
      NEO4J_server_memory_heap_max__size: 512M
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "${NEO4J_HTTP_PORT}:7474"
      - "${NEO4J_BOLT_PORT}:7687"
    volumes:
      - neo4j_data:/data
      - ./neo4j/init.cypher:/docker-entrypoint-initdb.d/00_init.cypher:ro
    healthcheck:
      test: ["CMD-SHELL","cypher-shell -a bolt://localhost:7687 -u neo4j -p ${NEO4J_PASSWORD} 'RETURN 1;' || exit 1"]
    # longer retry window allows first-start plugin init
      interval: 15s
      timeout: 10s
      retries: 40
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:v1.12.5
    ports:
      - "${QDRANT_PORT}:6333"
      - "${QDRANT_GRPC_PORT}:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL","wget -q --spider http://localhost:6333/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 60
    restart: unless-stopped

networks:
  default:
    name: ${NETWORK_NAME:-darf_net}

volumes:
  minio_data:
  pg_data:
  neo4j_data:
  qdrant_data:
