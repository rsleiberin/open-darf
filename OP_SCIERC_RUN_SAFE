#!/usr/bin/env bash
set +e

echo "=== SciERC safe runner ==="
if git rev-parse --show-toplevel >/dev/null 2>&1; then ROOT="$(git rev-parse --show-toplevel)"; else ROOT="$PWD"; fi
cd "$ROOT" || { echo "❌ cd failed: $ROOT"; echo "OK (no-op)"; exit 0; }

GOLD_DIR="${GOLD_FORCE_DIR_SCIERC:-var/datasets/normalized/scierc}"
DEV="$GOLD_DIR/dev.jsonl"
TST="$GOLD_DIR/test.jsonl"

if [ ! -s "$DEV" ] || [ ! -s "$TST" ]; then
  echo "(!) SciERC gold missing."
  echo "Provide char-offset JSONL at:"
  echo "  $DEV"
  echo "  $TST"
  echo "Or set GOLD_FORCE_DIR_SCIERC to a directory containing dev.jsonl and test.jsonl"
  echo "OK (no-op)"
  exit 0
fi

TARGET="var/datasets/normalized/scierc"
mkdir -p "$TARGET"
ln -sf "$DEV" "$TARGET/dev.jsonl" 2>/dev/null || cp -f "$DEV" "$TARGET/dev.jsonl"
ln -sf "$TST" "$TARGET/test.jsonl" 2>/dev/null || cp -f "$TST" "$TARGET/test.jsonl"

export TRANSFORMERS_OFFLINE=1
STAMP="$(date +%Y%m%d-%H%M%S)"
RUN="var/receipts/scierc/$STAMP"; mkdir -p "$RUN"

CFG="$RUN/hf_config.json"
BASE="var/receipts/phase7a/text2nkg_fullrun/20250902-232710/hf_config.json"
if [ -s "$BASE" ]; then cp "$BASE" "$CFG"; else printf '{}' > "$CFG"; fi

for sp in dev test; do
  OUT="$RUN/scierc_${sp}"; mkdir -p "$OUT"
  python tools/text2nkg/run_eval_scored.py --dataset scierc --split "$sp" --config "$CFG" --outdir "$OUT" || echo "(!) runner rc!=0 for $sp"
done

echo "OUT_ROOT=$RUN"
echo "OK"
