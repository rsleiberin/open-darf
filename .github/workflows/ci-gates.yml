name: CI Gates

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  gates:
    name: CI Gates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: "Preflight: validation files exist and are readable"
        shell: bash
        run: |
          set -euo pipefail
          echo "== tracked validation files =="
          git ls-files --stage var/receipts/phase6c/validation || true
          ok=1
          for f in \
            var/receipts/phase6c/validation/biored_scores_ml_test.json \
            var/receipts/phase6c/validation/scierc_scores_ml_test.json
          do
            if [ ! -s "$f" ]; then
              echo "::error file=$f::missing or empty"
              ok=0
            else
              echo "---- $f (head)"
              sed -n '1,60p' "$f" || true
            fi
          done
          [ "$ok" = 1 ] || exit 2

      - name: Rebuild validation/metrics.json from committed scores
        shell: bash
        run: |
          python - <<'PY'
          import json, pathlib, time
          val = pathlib.Path("var/receipts/phase6c/validation")
          out = val/"metrics.json"
          m  = {"version":"validation_metrics_v2","generated_at":int(time.time())}
          try:
              sc=json.load(open(val/"scierc_scores_ml_test.json"))
              mi=sc.get("micro",{})
              if {"P","R","F1"} <= set(mi):
                  m["scierc"]={"entity_f1":float(mi["F1"]),
                               "precision":float(mi["P"]),
                               "recall":float(mi["R"]),
                               "provenance":"validation_scierc_scores_ml_test.json"}
          except Exception as e:
              print("WARN scierc:", e)
          try:
              br=json.load(open(val/"biored_scores_ml_test.json"))
              mic=br.get("micro",{})
              m["biored"]={"entity_f1":float(mic.get("entity_f1",0.0)),
                           "relation_f1":float(mic.get("relation_f1",0.0)),
                           "provenance":"validation_biored_scores_ml_test.json"}
          except Exception as e:
              print("WARN biored:", e)
          out.parent.mkdir(parents=True, exist_ok=True)
          out.write_text(json.dumps(m, indent=2), encoding="utf-8")
          print(out.read_text())
          PY

      - name: Emit gates.json (from pinned validation)
        shell: bash
        run: |
          python scripts/emit_perf_and_constitution.py \
            --eval var/receipts/phase6c/validation \
            --out  var/reports/phase6c/gates.json
          echo "== gates.json keys =="
          (jq 'keys' var/reports/phase6c/gates.json || true)

      - name: Verify gates (presence + non-regression)
        shell: bash
        run: python scripts/ci_verify_gates.py

      - name: Print scoreboard
        shell: bash
        run: python scripts/print_scoreboard.py

      - name: Upload gates.json artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gates-json
          path: var/reports/phase6c/gates.json
          if-no-files-found: warn

      - name: Upload validation inputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-inputs
          path: var/receipts/phase6c/validation
          if-no-files-found: warn
