# Janus Project — Agent Operating Guide (v1.4)

> **Prime directive:** ship runnable slices, guard privacy, keep the user’s momentum high.

---

## 1 · Working with the User

| Preference             | What you must do                                                                 |
| ---------------------- | -------------------------------------------------------------------------------- |
| **Terminal-first**     | Provide copy-ready **bash** only. No editors, no GUIs. Use heredocs for files.  |
| **Human-in-the-loop**  | **Assume the user only returns terminal output.** Ask for content only if needed.|
| **Minimal prose**      | 1 short sentence status → then commands/code.                                    |
| **Rapid ideation**     | Post raw ideas to GitHub **Discussions**, then resume sprint tasks.             |
| **Token outages**      | If a tool/API fails, post a plaintext recap and proceed with a fallback.        |
| **Energy visible**     | If stuck >30 min, push WIP branch and leave a blocker note.                     |

---

## 2 · Communication Pattern

The “(.venv)” prefix appears when the agent activates `source .venv/bin/activate` (use `deactivate` to exit).

1. **Status** (one sentence)
2. **Commands / code block** (bash-first, ready to run)
3. **3-bullet recap + next step**

**End-of-day handoff:** start the message with the visual flair `END_OF_LOG` on its own line.  
*Do **not** append JSON like `{ "summary": true }`.*

---

## 3 · Repo / CI Canon

- Branches: `feat/<id>-slug`, `docs/<id>-slug`, `fix/<id>-slug`
- Conventional commits (`feat: …`, `fix: …`, `docs: …`)
- Issues must carry `area:`, `type:`, `status:`, `priority:`
- CI gates: **ruff · mypy · tests** — all green before push

---

## 4 · Security & Privacy

1. No plaintext personal data leaves device.
2. `END_OF_LOG` triggers: harvest → scrub → summarize → remote delete.
3. Secrets via `.env`; never hard‑code keys.
4. Privacy slider (*Ephemeral · Private · Publishable*) is canonical.

---

## 5 · Architecture Guardrails

- **DBs** – Postgres · Neo4j · Qdrant (one concern each)
- **Containers** – Podman + Quadlet
- **Data‑flow colours** – cyan = read · magenta = write · gray = metrics

---

## 6 · Issue Lifecycle

status:discussion → in-progress → review → done

Draft PR early; update at least every 24 h.

---

## 7 · Research Capture

- ≤ 200‑word summary in `docs/research/*.md`
- PDFs live in `docs/reference/`
- Big but vague idea → new **Discussion**, not Issue

---

## 8 · LLM Response Optimisation (proven tactics)

| Axis                    | Practice                                 |
| ----------------------- | ---------------------------------------- |
| Prompt clarity          | Explicit role + task + format            |
| Task decomposition      | ReAct / chain-of-thought                 |
| Retrieval Augmentation  | Context from Qdrant to cut hallucination |
| Self-consistency        | Sample multiple answers, vote / average  |
| Quantisation + KV-cache | 8‑bit + caching for local inference      |
| Distillation            | Fine‑tune smaller model on good outputs  |

---

## 9 · Behavioural Rules (Terminal‑only I/O)

- Expect **terminal output only** from the user unless they explicitly paste file contents.
- Use **bash heredocs** to create/modify files; avoid interactive editors.
- When asking for input, **request command output** (e.g., `gh issue list -L 50`) not screenshots.
- On errors, print the failing command with line number (`trap 'echo "ERR: $LINENO – $BASH_COMMAND"' ERR`).

---

## 10 · Handoff Checklist

- Recap (≤ 3 bullets)
- Next tasks (explicit or “none”)
- Pointers (branch / file / issue)
- Start the final message of the day with: `END_OF_LOG` (no JSON)

---

*End of guide.*
