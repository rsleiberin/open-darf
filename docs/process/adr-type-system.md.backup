# ADR Type System for RAG Research Stack

## Overview

This document defines the Architecture Decision Record (ADR) type system for the RAG research stack monorepo. The system supports research fraud detection, educational research evaluation, and agent swarm orchestration while maintaining clear separation between conceptual decisions and vendor implementations.

## Type System Architecture

### Core Technical Types

| Code | Name | Purpose | Example Use Case |
|------|------|---------|------------------|
| `CON` | Concept | Vendor-agnostic architectural slots | Vector Store requirements definition |
| `VEN` | Vendor | Specific implementation choices | Qdrant selection with rationale |
| `ARC` | Architecture | System-wide structural decisions | Multi-agent system design |
| `INT` | Integration | Inter-component connections | API gateway patterns |

### Research & Knowledge Types

| Code | Name | Purpose | Example Use Case |
|------|------|---------|------------------|
| `RSH` | Research | Literature review, comparative analysis | Graph neural network survey for fraud detection |
| `KNO` | Knowledge | Graph schema, ontology, data models | Research paper entity relationship schema |
| `ALG` | Algorithm | ML models, processing pipelines | Fraud detection classifier architecture |
| `VAL` | Validation | Testing approaches, evaluation metrics | Model performance benchmarking strategy |

### Domain-Specific Types

| Code | Name | Purpose | Example Use Case |
|------|------|---------|------------------|
| `AGT` | Agent | Individual agent design decisions | Literature review agent specialization |
| `SWM` | Swarm | Multi-agent coordination patterns | Task orchestration protocol design |
| `FRD` | Fraud Detection | Domain-specific detection logic | Research fraud pattern recognition |
| `EDU` | Education | Homeschool curriculum, learning paths | Off-grid education framework design |

### User Experience & Interface Types

| Code | Name | Purpose | Example Use Case |
|------|------|---------|------------------|
| `UX` | User Experience | Interface design, usability decisions | Component design patterns |
| `UI` | User Interface | Visual design, interaction patterns | Design token system |
| `ACC` | Accessibility | Accessibility compliance decisions | Screen reader compatibility |

### Operational & Governance Types

| Code | Name | Purpose | Example Use Case |
|------|------|---------|------------------|
| `SEC` | Security | Auth, encryption, privacy | API authentication strategy |
| `OPS` | Operations | Deployment, monitoring, scaling | Container orchestration approach |
| `GOV` | Governance | Data policies, ethical guidelines | Open source distribution strategy |
| `PRC` | Process | Development workflow, methodology | Research paper ingestion workflow |

### Meta & Evolution Types

| Code | Name | Purpose | Example Use Case |
|------|------|---------|------------------|
| `META` | Meta | ADR system itself, knowledge management | This type system definition |
| `EVO` | Evolution | Migration paths, technical debt | Database migration strategy |
| `EXP` | Experimental | Proof-of-concepts, research spikes | Novel agent architecture exploration |

## ADR Naming Convention

### Format
```
ADR-YYMM-TYPE-NNN[-vM.m.p]
```

### Field Definitions
- **YYMM**: Creation date (2508 = August 2025)
- **TYPE**: Three-letter type code from system above
- **NNN**: Sequential number within type (001, 002, etc.)
- **vM.m.p**: Optional semantic version for major revisions

### Examples
```
ADR-2508-CON-001        # Concept: Vector Store (base version)
ADR-2508-VEN-001        # Vendor: Qdrant implementation  
ADR-2508-RSH-001        # Research: Vector DB comparison study
ADR-2508-AGT-001        # Agent: Literature review specialist
ADR-2508-UX-001         # UX: Component design patterns
ADR-2508-CON-001-v2.0.0 # Major revision to Vector Store concept
```

## Required Metadata Structure

### Enhanced YAML Front Matter
```yaml
---
id: ADR-YYMM-TYPE-NNN
legacy_id: [previous_id]        # For migrated ADRs
type: [TYPE_CODE]
status: [proposed|accepted|deprecated|superseded]
date: YYYY-MM-DD
title: "Brief decision description"

# Enhanced metadata for research-driven decisions
decision_confidence: [1-10]      # How certain are you about this choice
time_investment: "X_hours"       # Actual time spent researching/deciding
main_tradeoff: "aspect_a vs aspect_b"  # Key compromise made
alternatives_rejected: ["option1", "option2"]  # What you almost picked
reevaluate_when: "specific_trigger"     # Clear condition for revisiting

# Relationship tracking
supersedes: [ADR-ID]            # What this replaces
superseded_by: [ADR-ID]         # What replaces this
implements_concept: [ADR-ID]    # For VEN ADRs, link to CON ADR
research_basis: [ADR-ID]        # Link to supporting RSH ADRs

# Evidence and documentation
linked_evidence:
  - "../reference/source_document.pdf"
  - "research_analysis.md"

tags: [tag1, tag2, tag3]
---
```

## Relationship Patterns

### Research → Concept → Vendor Chain
```
RSH ADR (Literature Review) 
    ↓ informs
CON ADR (Requirements Definition)
    ↓ drives  
VEN ADR (Specific Implementation)
    ↓ enables
INT ADR (System Integration)
```

### Agent Hierarchy
```
AGT ADR (Individual Agent Design)
    ↓ composes into
SWM ADR (Swarm Coordination)
    ↓ supports
ARC ADR (System Architecture)
```

## Implementation Phases

### Phase 1: Foundation (Current)
**Priority Types**: `CON`, `VEN`, `RSH`, `KNO`, `UX`, `META`

- [x] Define type system (this document)
- [ ] Migrate existing 16 ADRs to new format
- [ ] Process reference documents into RSH ADRs
- [ ] Establish vendor selections with research backing

### Phase 2: Intelligence (6 months)
**Priority Types**: `ALG`, `AGT`, `SWM`, `FRD`

- [ ] Implement ML models based on research
- [ ] Design specialized agent architectures  
- [ ] Build fraud detection algorithms
- [ ] Create swarm coordination protocols

### Phase 3: Distribution (12 months)
**Priority Types**: `EDU`, `GOV`, `EVO`

- [ ] Educational curriculum integration
- [ ] Governance frameworks for distribution
- [ ] Migration and evolution tooling

## Directory Structure Integration

```
docs/
├── process/
│   ├── adr-type-system.md      # This document
│   ├── branching-strategy.md   # Git workflow
│   └── github-standards.md     # Development standards
├── decisions/
│   ├── 0001-favicon-gradient.md          # Legacy format
│   ├── ADR-2508-META-001-type-system.md  # New format
│   └── ADR-2508-VEN-001-qdrant.md        # New format
└── reference/
    ├── research_document.pdf    # Source for RSH ADRs
    └── vendor_analysis.pdf      # Source for VEN ADRs
```

## Validation Requirements

### Automated Checks
- Type codes must exist in approved system
- Sequential numbering unique within type
- Required metadata fields present
- Evidence links point to existing files

### Quality Assurance
- All VEN ADRs must reference a CON ADR
- Research claims must link to evidence
- Vendor decisions must justify concept alignment
- Relationship mappings must be bidirectional

## Migration Strategy

### Legacy ADR Handling
1. **Preserve Legacy IDs**: Add `legacy_id` field to maintain references
2. **Cross-Reference**: Link old and new formats bidirectionally  
3. **Gradual Migration**: Update high-impact decisions first
4. **No Breaking Changes**: Existing links continue to work

### Example Migration
```yaml
# New format maintains legacy compatibility
id: ADR-2506-UX-001
legacy_id: 0001-favicon-gradient
supersedes: 0001-favicon-gradient.md
```

## Success Metrics

- **Research Traceability**: Every technical decision traces to academic literature
- **Concept Clarity**: Clear separation between architectural concepts and implementations
- **Distribution Readiness**: External teams can understand and adopt the system
- **Evolution Support**: Changes don't lose institutional knowledge

---

*This type system enables research-driven, modular architecture decisions that scale from solo development to distributed teams while maintaining academic rigor and institutional memory.*
